import 'dart:typed_data';
import 'package:flutter/services.dart';

class Postdata {
  final int postId;
  Uint8List? image1;
  final String title;
  final String content;
  final String hashtag;

  static Future<Uint8List> loadAssetImage(String assetPath) async {
    // ‡∏ñ‡πâ‡∏≤ assetPath ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "assets/" ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å
    String correctedPath = assetPath.startsWith("assets/") ? assetPath.substring(7) : assetPath;
    ByteData data = await rootBundle.load("assets/" + correctedPath);
    return data.buffer.asUint8List();
  }

  // Static List ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  static List<Postdata> postList = [];

  Postdata({
    required this.postId,
    this.image1,
    required this.title,
    required this.content,
    required this.hashtag,
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô List (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î default ‡∏à‡∏≤‡∏Å assets)
  static Future<void> addPost(Postdata post) async {
    int newId = postList.isEmpty ? 1 : postList.last.postId + 1;
    Uint8List image = post.image1 ?? await loadAssetImage("assets/images/default.png");

    Postdata newPost = Postdata(
      postId: newId,
      title: post.title,
      content: post.content,
      hashtag: post.hashtag,
      image1: image,
    );

    postList.add(newPost);
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (mock data) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å assets
  static Future<void> loadInitialPosts() async {
    List<Postdata> mockPosts = [
      Postdata(
        postId: 1,
        title: "5 ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏ô‡πâ‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏•‡∏≤‡∏î ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö ‚ÄúYour Name‚Äù",
        content: "‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π!",
        hashtag: "#‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞",
      ),
      Postdata(
        postId: 2,
        title: "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ü‡∏¥‡∏ô ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°!",
        content: "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô!",
        hashtag: "#‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢",
      ),
      Postdata(
        postId: 3,
        title: "‡∏°‡∏±‡∏á‡∏á‡∏∞‡πÅ‡∏ô‡∏ß‡∏™‡∏∑‡∏ö‡∏™‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∏‡πâ‡∏ô‡∏à‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏≤‡∏¢‡πÉ‡∏à üïµ",
        content: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏™‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏Ñ‡∏ô‡∏±‡∏ô!",
        hashtag: "#‡∏°‡∏±‡∏á‡∏á‡∏∞",
      ),
      Postdata(
        postId: 4,
        title: "‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞ Slice of Life ‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏Å‡πÉ‡∏à",
        content: "‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞ Slice of Life ‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏Å‡πÉ‡∏à!",
        hashtag: "#‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞",
      ),
    ];

    List<String> imagePaths = [
      "assets/images/post/post1.png",
      "assets/images/post/post2.png",
      "assets/images/post/post3.png",
      "assets/images/post/post4.png",
    ];

    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    List<Uint8List> images = await Future.wait(
      imagePaths.map((path) => loadAssetImage(path)),
    );

    for (int i = 0; i < mockPosts.length; i++) {
      mockPosts[i].image1 = images[i];
    }

    postList = mockPosts;
  }

  // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏° ID
  static Postdata? getPostById(int id) {
    return postList.firstWhere(
      (post) => post.postId == id,
      orElse: () => Postdata(
        postId: -1,
        title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå",
        content: "‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        hashtag: "#‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        image1: null,
      ),
    );
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  static List<Postdata> getAllPosts() {
    return postList;
  }
}
